<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Wnxy&#39;s Blog</title>
  
  <subtitle>Launch and learn. Everything is progress.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://wnxy.github.io/"/>
  <updated>2022-05-15T15:10:07.000Z</updated>
  <id>https://wnxy.github.io/</id>
  
  <author>
    <name>wnxy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>pages</title>
    <link href="https://wnxy.github.io/2022/05/15/pages/"/>
    <id>https://wnxy.github.io/2022/05/15/pages/</id>
    <published>2022-05-15T15:10:07.000Z</published>
    <updated>2022-05-15T15:10:07.000Z</updated>
    
    <summary type="html">
    
      莞尔日记，不能看哦！！！
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Hexo Melody博客添加文章更新和多评论系统</title>
    <link href="https://wnxy.github.io/2022/05/15/Hexo-melody-blog-beautification2/"/>
    <id>https://wnxy.github.io/2022/05/15/Hexo-melody-blog-beautification2/</id>
    <published>2022-05-15T14:03:38.000Z</published>
    <updated>2022-05-15T14:03:38.000Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h2&gt;&lt;p&gt;博客添加文章更新时间是我想了很久的事，写博客的时候经常有修改旧博客的习惯，每次旧博客更新完毕推送到仓库时发现更新过的博客依然埋没在好多页之后，因为Hexo博客默认以文章的发布时间排序，而不是更新时间。&lt;/p&gt;
&lt;p&gt;折腾多评论系统是因为我之前使用的博客评论系统是Valine国际版（Valine国内版需要实名认证，太麻烦了），不稳定，有时候会域名失效，导致博客无法评论，所以想配置Disqus和Valine双评论系统。&lt;/p&gt;
    
    </summary>
    
    
      <category term="博客搭建" scheme="https://wnxy.github.io/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="Hexo" scheme="https://wnxy.github.io/tags/Hexo/"/>
    
      <category term="Melody" scheme="https://wnxy.github.io/tags/Melody/"/>
    
      <category term="Disqus" scheme="https://wnxy.github.io/tags/Disqus/"/>
    
      <category term="DisqusJs" scheme="https://wnxy.github.io/tags/DisqusJs/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode时间复杂度估计</title>
    <link href="https://wnxy.github.io/2022/05/10/leetcode_time_complexity_estimation/"/>
    <id>https://wnxy.github.io/2022/05/10/leetcode_time_complexity_estimation/</id>
    <published>2022-05-10T14:05:01.000Z</published>
    <updated>2022-05-11T14:05:01.000Z</updated>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>C++ 类成员函数与内联函数</title>
    <link href="https://wnxy.github.io/2022/05/10/cpp_class_mem_func_and_inline_func/"/>
    <id>https://wnxy.github.io/2022/05/10/cpp_class_mem_func_and_inline_func/</id>
    <published>2022-05-10T13:50:53.000Z</published>
    <updated>2022-05-10T13:54:28.257Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;类定义的内联函数分为以下3种：&lt;/p&gt;
&lt;h2 id=&quot;1-隐式内联&quot;&gt;&lt;a href=&quot;#1-隐式内联&quot; class=&quot;headerlink&quot; title=&quot;1. 隐式内联&quot;&gt;&lt;/a&gt;1. 隐式内联&lt;/h2&gt;&lt;p&gt;类里面定义的函数隐式内联，有利于类内部实现细节的隐藏。&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Person&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Person(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; &amp;amp;name)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		Name = name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;printName&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;//printName 定义在类里面是隐式内联函数&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;	&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; Name &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; Name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="C/C++" scheme="https://wnxy.github.io/categories/C-C/"/>
    
    
      <category term="内联函数" scheme="https://wnxy.github.io/tags/%E5%86%85%E8%81%94%E5%87%BD%E6%95%B0/"/>
    
      <category term="成员函数" scheme="https://wnxy.github.io/tags/%E6%88%90%E5%91%98%E5%87%BD%E6%95%B0/"/>
    
      <category term="类" scheme="https://wnxy.github.io/tags/%E7%B1%BB/"/>
    
      <category term="隐式内联" scheme="https://wnxy.github.io/tags/%E9%9A%90%E5%BC%8F%E5%86%85%E8%81%94/"/>
    
  </entry>
  
  <entry>
    <title>C++ 含有可变形参的函数</title>
    <link href="https://wnxy.github.io/2022/05/09/cpp_func_with_variable_parameters/"/>
    <id>https://wnxy.github.io/2022/05/09/cpp_func_with_variable_parameters/</id>
    <published>2022-05-09T13:41:36.000Z</published>
    <updated>2022-05-09T13:49:23.062Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;有时我们无法提前预知应该向函数传递几个实参。例如，我们想要编写代码输出程序产生的错误信息，此时最好用同一个函数实现该项功能，以便对所有的错误处理能够整齐划一。然而，错误信息的种类不同，所以调用错误输出函数时传递的实参也各不相同。&lt;/p&gt;
&lt;p&gt;为了编写能处理不同数量实参的函数，c++11新标准提供了两种主要的方法：如果所有的实参类型相同，可以一个名为&lt;code&gt;initializer_list&lt;/code&gt;的标准库类型；如果实参的类型不同，我们可以编写一种特殊的函数，也就是所谓的可变参数模板。&lt;/p&gt;
&lt;p&gt;c++还有一种特殊的形参类型（即省略符），可以用它传递可变数量的实参，不过需要注意，此功能&lt;strong&gt;一般只用于与c函数交互的接口程序&lt;/strong&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="C/C++" scheme="https://wnxy.github.io/categories/C-C/"/>
    
    
      <category term="可变形参" scheme="https://wnxy.github.io/tags/%E5%8F%AF%E5%8F%98%E5%BD%A2%E5%8F%82/"/>
    
      <category term="initializer_list" scheme="https://wnxy.github.io/tags/initializer-list/"/>
    
      <category term="省略符形参" scheme="https://wnxy.github.io/tags/%E7%9C%81%E7%95%A5%E7%AC%A6%E5%BD%A2%E5%8F%82/"/>
    
  </entry>
  
  <entry>
    <title>C++ main函数处理命令行选项</title>
    <link href="https://wnxy.github.io/2022/05/07/cpp_main_function_parameters/"/>
    <id>https://wnxy.github.io/2022/05/07/cpp_main_function_parameters/</id>
    <published>2022-05-07T13:00:30.000Z</published>
    <updated>2022-05-07T14:00:37.538Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;一般情况下，我们定义的main函数都只有空的形参列表：&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123; ... &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然而，有时我们确实需要给main函数传递实参，一种常见的情况就是用户需要设置一组选项来确定函数所要执行的操作。此时，main函数定义为：&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;* argc[])&lt;/span&gt; &lt;/span&gt;&amp;#123; ... &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="C/C++" scheme="https://wnxy.github.io/categories/C-C/"/>
    
    
      <category term="函数" scheme="https://wnxy.github.io/tags/%E5%87%BD%E6%95%B0/"/>
    
      <category term="参数传递" scheme="https://wnxy.github.io/tags/%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92/"/>
    
      <category term="main形参" scheme="https://wnxy.github.io/tags/main%E5%BD%A2%E5%8F%82/"/>
    
  </entry>
  
  <entry>
    <title>学习静态库和动态库</title>
    <link href="https://wnxy.github.io/2022/03/18/Static_and_dynamic_libraries/"/>
    <id>https://wnxy.github.io/2022/03/18/Static_and_dynamic_libraries/</id>
    <published>2022-03-18T03:57:52.000Z</published>
    <updated>2022-03-18T12:36:25.380Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、什么是库？&quot;&gt;&lt;a href=&quot;#一、什么是库？&quot; class=&quot;headerlink&quot; title=&quot;一、什么是库？&quot;&gt;&lt;/a&gt;一、什么是库？&lt;/h2&gt;&lt;p&gt;在windows平台和linux平台下都大量存在着库。一般是软件作者为了发布方便、替换方便或二次开发目的，而发布的一组可以单独与应用程序进行compile time或runtime链接的二进制可重定位目标码文件。&lt;/p&gt;
&lt;p&gt;本质上来说库是一种可执行代码的二进制形式，这个文件可以在编译时由编译器直接链接到可执行程序中，也可以在运行时由操作系统的runtime enviroment根据需要动态加载到内存中。&lt;/p&gt;
&lt;p&gt;一组库，就形成了一个发布包，当然，具体发布多少个库，完全由库提供商自己决定。&lt;/p&gt;
&lt;p&gt;由于windows和linux的本质不同，因此二者库的二进制是不兼容的。&lt;/p&gt;
&lt;p&gt;现实中每个程序都要依赖很多基础的底层库，不可能每个人的代码都从零开始，因此库的存在意义非同寻常。&lt;/p&gt;
&lt;p&gt;共享库的好处是，不同的应用程序如果调用相同的库，那么在内存里只需要有一份该共享库的实例。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux 学习" scheme="https://wnxy.github.io/categories/Linux-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Linux" scheme="https://wnxy.github.io/tags/Linux/"/>
    
      <category term="Windows" scheme="https://wnxy.github.io/tags/Windows/"/>
    
      <category term="静态库" scheme="https://wnxy.github.io/tags/%E9%9D%99%E6%80%81%E5%BA%93/"/>
    
      <category term="动态库" scheme="https://wnxy.github.io/tags/%E5%8A%A8%E6%80%81%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>C++拷贝构造函数和赋值运算符</title>
    <link href="https://wnxy.github.io/2022/01/10/cpp_constructor_and_assign/"/>
    <id>https://wnxy.github.io/2022/01/10/cpp_constructor_and_assign/</id>
    <published>2022-01-10T11:51:08.000Z</published>
    <updated>2022-01-10T13:25:19.412Z</updated>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="C/C++" scheme="https://wnxy.github.io/categories/C-C/"/>
    
    
      <category term="构造函数" scheme="https://wnxy.github.io/tags/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/"/>
    
      <category term="赋值运算符" scheme="https://wnxy.github.io/tags/%E8%B5%8B%E5%80%BC%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    
  </entry>
  
  <entry>
    <title>C++ 11 =default 和 =delete</title>
    <link href="https://wnxy.github.io/2022/01/10/cpp11_default_and_delete/"/>
    <id>https://wnxy.github.io/2022/01/10/cpp11_default_and_delete/</id>
    <published>2022-01-10T11:47:13.000Z</published>
    <updated>2022-01-10T11:57:24.920Z</updated>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="C/C++" scheme="https://wnxy.github.io/categories/C-C/"/>
    
    
      <category term="构造函数" scheme="https://wnxy.github.io/tags/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/"/>
    
      <category term="赋值运算符" scheme="https://wnxy.github.io/tags/%E8%B5%8B%E5%80%BC%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    
  </entry>
  
  <entry>
    <title>语义化版本控制</title>
    <link href="https://wnxy.github.io/2021/12/05/Semantic_version_control/"/>
    <id>https://wnxy.github.io/2021/12/05/Semantic_version_control/</id>
    <published>2021-12-05T05:28:50.000Z</published>
    <updated>2021-12-05T05:36:25.066Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;文章转载自：&lt;a href=&quot;https://semver.org/lang/zh-CN/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://semver.org/lang/zh-CN/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h2&gt;&lt;p&gt;版本格式：主版本号.次版本号.修订号，版本号递增规则如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;主版本号：当你做了不兼容的 API 修改，&lt;/li&gt;
&lt;li&gt;次版本号：当你做了向下兼容的功能性新增，&lt;/li&gt;
&lt;li&gt;修订号：当你做了向下兼容的问题修正。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;先行版本号及版本编译信息可以加到“主版本号.次版本号.修订号”的后面，作为延伸。&lt;/p&gt;
    
    </summary>
    
    
      <category term="随笔/杂谈" scheme="https://wnxy.github.io/categories/%E9%9A%8F%E7%AC%94-%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="版本控制" scheme="https://wnxy.github.io/tags/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>软件设计模式之单例模式</title>
    <link href="https://wnxy.github.io/2021/11/10/cpp_singleton_pattern/"/>
    <id>https://wnxy.github.io/2021/11/10/cpp_singleton_pattern/</id>
    <published>2021-11-10T13:09:36.000Z</published>
    <updated>2021-11-10T14:44:56.877Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是单例模式？&quot;&gt;&lt;a href=&quot;#什么是单例模式？&quot; class=&quot;headerlink&quot; title=&quot;什么是单例模式？&quot;&gt;&lt;/a&gt;什么是单例模式？&lt;/h2&gt;&lt;p&gt;有的时候我们需要应用程序中的某个实例在运行期间有且只能有一个实例，程序运行时没有任何方法实现创建多于一个的实例，这种情况我们称之为软件设计模式——单例模式。&lt;/p&gt;
&lt;p&gt;比如我们软件运行时，有且只能有一个日志对象…….&lt;/p&gt;
    
    </summary>
    
    
      <category term="C/C++" scheme="https://wnxy.github.io/categories/C-C/"/>
    
    
      <category term="设计模式" scheme="https://wnxy.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="单例模式" scheme="https://wnxy.github.io/tags/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="DCLP" scheme="https://wnxy.github.io/tags/DCLP/"/>
    
      <category term="锁机制" scheme="https://wnxy.github.io/tags/%E9%94%81%E6%9C%BA%E5%88%B6/"/>
    
      <category term="多线程" scheme="https://wnxy.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Git常用命令</title>
    <link href="https://wnxy.github.io/2021/10/27/Git_common_commands/"/>
    <id>https://wnxy.github.io/2021/10/27/Git_common_commands/</id>
    <published>2021-10-27T03:14:44.000Z</published>
    <updated>2021-11-10T14:43:02.928Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;常用命令&quot;&gt;&lt;a href=&quot;#常用命令&quot; class=&quot;headerlink&quot; title=&quot;常用命令&quot;&gt;&lt;/a&gt;常用命令&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mkdir &amp;lt;filename&amp;gt;           &amp;#x2F;&amp;#x2F;创建目录  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cd &amp;lt;filename&amp;gt;              &amp;#x2F;&amp;#x2F;进入指定文件夹&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rm &amp;lt;filename&amp;gt;              &amp;#x2F;&amp;#x2F;工作区删除文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rm -rf &amp;lt;foldername&amp;gt;        &amp;#x2F;&amp;#x2F;工作区删除文件夹&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pwd                        &amp;#x2F;&amp;#x2F;打印当前路径&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cat &amp;lt;filename&amp;gt;             &amp;#x2F;&amp;#x2F;查看指定文件的内容&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ls -a                      &amp;#x2F;&amp;#x2F;查看隐藏的.git文件，.git文件是git版本库，里面的stage就是暂存区&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git init                   &amp;#x2F;&amp;#x2F;将命令运行的目录变成git可以管理的仓库&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git add &amp;lt;filename&amp;gt;         &amp;#x2F;&amp;#x2F;将指定文件从工作区添加到暂存区&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git commit -m &amp;quot;提交说明&amp;quot;    &amp;#x2F;&amp;#x2F;将暂存区的所有文件提交到版本库，-m后面添加说明&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git status                 &amp;#x2F;&amp;#x2F;查看当前版本库状态&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git log                    &amp;#x2F;&amp;#x2F;查看历史版本记录&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git log --pretty&amp;#x3D;oneline   &amp;#x2F;&amp;#x2F;查看历史记录，只不过一行显示更加清晰&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git reflog                 &amp;#x2F;&amp;#x2F;查看你的历史命令，可以看到历史版本的版本号，利用历史版本的版本号可以实现代码版本的回退&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git diff &amp;lt;filename&amp;gt;        &amp;#x2F;&amp;#x2F;查看该文件的具体修改内容&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git diff HEAD &amp;lt;filename&amp;gt;   &amp;#x2F;&amp;#x2F;查看工作区与版本库里面的最新版本的区别&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git reset --hard &amp;lt;版本号&amp;gt;   &amp;#x2F;&amp;#x2F;回退到指定版本号的版本&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git reset --hard HEAD^     &amp;#x2F;&amp;#x2F;回退到上一个版本&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="GitHub" scheme="https://wnxy.github.io/categories/GitHub/"/>
    
    
      <category term="Git" scheme="https://wnxy.github.io/tags/Git/"/>
    
      <category term="GitHub" scheme="https://wnxy.github.io/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>C++ 标准库算法源代码剖析</title>
    <link href="https://wnxy.github.io/2021/07/26/cpp_algorithm_analysis/"/>
    <id>https://wnxy.github.io/2021/07/26/cpp_algorithm_analysis/</id>
    <published>2021-07-26T07:52:39.000Z</published>
    <updated>2021-07-27T03:12:08.309Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、-算法-accumulate&quot;&gt;&lt;a href=&quot;#一、-算法-accumulate&quot; class=&quot;headerlink&quot; title=&quot;一、 算法 accumulate&quot;&gt;&lt;/a&gt;一、 算法 accumulate&lt;/h2&gt;&lt;h3 id=&quot;1-功能&quot;&gt;&lt;a href=&quot;#1-功能&quot; class=&quot;headerlink&quot; title=&quot;1. 功能&quot;&gt;&lt;/a&gt;1. 功能&lt;/h3&gt;&lt;p&gt;对容器内的元素进行累计（不限于累加运算，可以是自己传进去的运算）。&lt;/p&gt;
    
    </summary>
    
    
      <category term="C/C++" scheme="https://wnxy.github.io/categories/C-C/"/>
    
    
      <category term="STL" scheme="https://wnxy.github.io/tags/STL/"/>
    
      <category term="标准库" scheme="https://wnxy.github.io/tags/%E6%A0%87%E5%87%86%E5%BA%93/"/>
    
      <category term="算法" scheme="https://wnxy.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>C++ this指针</title>
    <link href="https://wnxy.github.io/2021/07/22/cpp_this_pointer/"/>
    <id>https://wnxy.github.io/2021/07/22/cpp_this_pointer/</id>
    <published>2021-07-22T14:14:16.000Z</published>
    <updated>2022-03-18T11:42:59.348Z</updated>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="C/C++" scheme="https://wnxy.github.io/categories/C-C/"/>
    
    
      <category term="this指针" scheme="https://wnxy.github.io/tags/this%E6%8C%87%E9%92%88/"/>
    
  </entry>
  
  <entry>
    <title>C++ 中的左值、右值</title>
    <link href="https://wnxy.github.io/2021/07/20/cpp_leftvalue_and_rightvalue/"/>
    <id>https://wnxy.github.io/2021/07/20/cpp_leftvalue_and_rightvalue/</id>
    <published>2021-07-20T14:10:55.000Z</published>
    <updated>2021-07-23T02:19:17.954Z</updated>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="C/C++" scheme="https://wnxy.github.io/categories/C-C/"/>
    
    
      <category term="左值" scheme="https://wnxy.github.io/tags/%E5%B7%A6%E5%80%BC/"/>
    
      <category term="右值" scheme="https://wnxy.github.io/tags/%E5%8F%B3%E5%80%BC/"/>
    
  </entry>
  
  <entry>
    <title>C++ 文件操作与文件流</title>
    <link href="https://wnxy.github.io/2021/07/17/cpp_file_stream/"/>
    <id>https://wnxy.github.io/2021/07/17/cpp_file_stream/</id>
    <published>2021-07-17T14:09:54.000Z</published>
    <updated>2021-07-23T02:15:53.986Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、文件的概念&quot;&gt;&lt;a href=&quot;#一、文件的概念&quot; class=&quot;headerlink&quot; title=&quot;一、文件的概念&quot;&gt;&lt;/a&gt;一、文件的概念&lt;/h2&gt;&lt;p&gt;对于用户来说，常用到的文件有两大类：程序文件和数据文件。而根据文件中数据的组织方式，则可以将文件分为&lt;strong&gt;ASCII 文件&lt;/strong&gt;和&lt;strong&gt;二进制文件&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ASCII 文件，又称字符文件或者文本文件，它的每一个字节放一个 ASCII 代码，代表一个字符。&lt;/li&gt;
&lt;li&gt;二进制文件，又称内部格式文件或字节文件，是把内存中的数据按其在内存中的存储形式原样输出到磁盘上存放。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="C/C++" scheme="https://wnxy.github.io/categories/C-C/"/>
    
    
      <category term="文件流" scheme="https://wnxy.github.io/tags/%E6%96%87%E4%BB%B6%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>C++中的构造函数与析构函数</title>
    <link href="https://wnxy.github.io/2021/07/15/cpp_constructor_and_destructor/"/>
    <id>https://wnxy.github.io/2021/07/15/cpp_constructor_and_destructor/</id>
    <published>2021-07-15T13:36:42.000Z</published>
    <updated>2021-07-22T14:09:09.258Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;原文链接：&lt;a href=&quot;https://www.cnblogs.com/mr-wid/archive/2013/02/19/2917911.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.cnblogs.com/mr-wid/archive/2013/02/19/2917911.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;一、构造函数介绍&quot;&gt;&lt;a href=&quot;#一、构造函数介绍&quot; class=&quot;headerlink&quot; title=&quot;一、构造函数介绍&quot;&gt;&lt;/a&gt;一、构造函数介绍&lt;/h2&gt;&lt;h3 id=&quot;1-构造函数的作用&quot;&gt;&lt;a href=&quot;#1-构造函数的作用&quot; class=&quot;headerlink&quot; title=&quot;1.构造函数的作用&quot;&gt;&lt;/a&gt;1.构造函数的作用&lt;/h3&gt;&lt;p&gt;构造函数主要用来在创建对象时完成对对象属性的一些初始化等操作, 当创建对象时, 对象会自动调用它的构造函数。一般来说, 构造函数有以下三个方面的作用:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;给创建的对象建立一个标识符;&lt;/li&gt;
&lt;li&gt;为对象数据成员开辟内存空间;&lt;/li&gt;
&lt;li&gt;完成对象数据成员的初始化。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="C/C++" scheme="https://wnxy.github.io/categories/C-C/"/>
    
    
      <category term="构造函数" scheme="https://wnxy.github.io/tags/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/"/>
    
      <category term="析构函数" scheme="https://wnxy.github.io/tags/%E6%9E%90%E6%9E%84%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>STL中的优先级队列和堆问题</title>
    <link href="https://wnxy.github.io/2021/06/28/Priority_queue_and_heap/"/>
    <id>https://wnxy.github.io/2021/06/28/Priority_queue_and_heap/</id>
    <published>2021-06-28T02:20:50.000Z</published>
    <updated>2021-06-29T13:06:05.469Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;priority_queue 是容器适配器，它提供常数时间的（默认）最大元素查找，对数代价的插入与释出。&lt;/p&gt;
&lt;p&gt;可用用户提供的 &lt;code&gt;Compare&lt;/code&gt; 更改顺序，例如，用 std::greater&lt;T&gt; 将导致最小元素作为 &lt;a href=&quot;https://zh.cppreference.com/w/cpp/container/priority_queue/top&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;top()&lt;/a&gt; 出现。&lt;/p&gt;
&lt;p&gt;用 &lt;code&gt;priority_queue&lt;/code&gt; 工作类似管理某些随机访问容器中的&lt;a href=&quot;https://zh.cppreference.com/w/cpp/algorithm/make_heap&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;堆&lt;/a&gt;，优势是不可能突然把堆非法化。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;默认情况下priority_queue内部是以”降序“排列的，即默认&lt;strong&gt;大顶堆&lt;/strong&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="C/C++" scheme="https://wnxy.github.io/categories/C-C/"/>
    
    
      <category term="堆" scheme="https://wnxy.github.io/tags/%E5%A0%86/"/>
    
      <category term="STL" scheme="https://wnxy.github.io/tags/STL/"/>
    
      <category term="priority_queue" scheme="https://wnxy.github.io/tags/priority-queue/"/>
    
      <category term="优先级队列" scheme="https://wnxy.github.io/tags/%E4%BC%98%E5%85%88%E7%BA%A7%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>求解某一范围内的全部素数</title>
    <link href="https://wnxy.github.io/2021/06/27/Calculate_prime_numbers/"/>
    <id>https://wnxy.github.io/2021/06/27/Calculate_prime_numbers/</id>
    <published>2021-06-27T12:28:04.000Z</published>
    <updated>2021-06-29T12:20:54.631Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;素数&lt;/strong&gt;又称质数，是指大于1的&lt;a href=&quot;https://baike.baidu.com/item/自然数&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;自然数&lt;/a&gt;中，除了1和它本身，不能被其它自然数整除的数字。1被定义为非素数。大于1的自然数，如果不是素数则为&lt;strong&gt;合数&lt;/strong&gt;。&lt;strong&gt;2是最小的素数&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;问题&lt;/strong&gt;：给定一个范围，求解这个范围内的全部素数。&lt;/p&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://wnxy.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="LeetCode刷题" scheme="https://wnxy.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/LeetCode%E5%88%B7%E9%A2%98/"/>
    
    
      <category term="素数" scheme="https://wnxy.github.io/tags/%E7%B4%A0%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>经典 TopK 问题</title>
    <link href="https://wnxy.github.io/2021/06/25/Classic_TopK_problem/"/>
    <id>https://wnxy.github.io/2021/06/25/Classic_TopK_problem/</id>
    <published>2021-06-25T12:00:52.000Z</published>
    <updated>2021-06-29T08:10:49.295Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;什么是 Top K 问题？简单来说就是在一堆数据里面找到前 K 大（当然也可以是前 K 小）的数。&lt;/p&gt;
&lt;p&gt;这个问题也是十分经典的算法问题，不论是面试中还是实际开发中，都非常典型。而这个问题其实也有很多种做法，你真的都懂了么？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;经典的 Top K 问题有：最大（小） K 个数、前 K 个高频元素、第 K 个最大（小）元素，下面举例子说明：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;栗子(以下所有方法均使用这个栗子)&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;从 data[1, 12]={5,3,7,1,8,2,9,4,7,2,6,6} 这n=12个数中，找出最大的k=5个。&lt;/p&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://wnxy.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="LeetCode刷题" scheme="https://wnxy.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/LeetCode%E5%88%B7%E9%A2%98/"/>
    
    
      <category term="排序" scheme="https://wnxy.github.io/tags/%E6%8E%92%E5%BA%8F/"/>
    
      <category term="堆" scheme="https://wnxy.github.io/tags/%E5%A0%86/"/>
    
      <category term="分治法" scheme="https://wnxy.github.io/tags/%E5%88%86%E6%B2%BB%E6%B3%95/"/>
    
      <category term="减治法" scheme="https://wnxy.github.io/tags/%E5%87%8F%E6%B2%BB%E6%B3%95/"/>
    
  </entry>
  
</feed>
