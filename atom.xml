<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Wnxy&#39;s Blog</title>
  
  <subtitle>Launch and learn. Everything is progress.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://wnxy.github.io/"/>
  <updated>2021-07-27T03:12:08.309Z</updated>
  <id>https://wnxy.github.io/</id>
  
  <author>
    <name>wnxy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C++ 标准库算法源代码剖析</title>
    <link href="https://wnxy.github.io/2021/07/26/cpp_algorithm_analysis/"/>
    <id>https://wnxy.github.io/2021/07/26/cpp_algorithm_analysis/</id>
    <published>2021-07-26T07:52:39.000Z</published>
    <updated>2021-07-27T03:12:08.309Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、-算法-accumulate&quot;&gt;&lt;a href=&quot;#一、-算法-accumulate&quot; class=&quot;headerlink&quot; title=&quot;一、 算法 accumulate&quot;&gt;&lt;/a&gt;一、 算法 accumulate&lt;/h2&gt;&lt;h3 id=&quot;1-功能&quot;&gt;&lt;a href=&quot;#1-功能&quot; class=&quot;headerlink&quot; title=&quot;1. 功能&quot;&gt;&lt;/a&gt;1. 功能&lt;/h3&gt;&lt;p&gt;对容器内的元素进行累计（不限于累加运算，可以是自己传进去的运算）。&lt;/p&gt;
    
    </summary>
    
    
      <category term="C/C++" scheme="https://wnxy.github.io/categories/C-C/"/>
    
    
      <category term="STL" scheme="https://wnxy.github.io/tags/STL/"/>
    
      <category term="标准库" scheme="https://wnxy.github.io/tags/%E6%A0%87%E5%87%86%E5%BA%93/"/>
    
      <category term="算法" scheme="https://wnxy.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>C++ this指针</title>
    <link href="https://wnxy.github.io/2021/07/22/cpp_this_pointer/"/>
    <id>https://wnxy.github.io/2021/07/22/cpp_this_pointer/</id>
    <published>2021-07-22T14:14:16.000Z</published>
    <updated>2021-07-23T02:22:55.936Z</updated>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="C/C++" scheme="https://wnxy.github.io/categories/C-C/"/>
    
    
      <category term="this指针" scheme="https://wnxy.github.io/tags/this%E6%8C%87%E9%92%88/"/>
    
  </entry>
  
  <entry>
    <title>C++ 中的左值、右值</title>
    <link href="https://wnxy.github.io/2021/07/20/cpp_leftvalue_and_rightvalue/"/>
    <id>https://wnxy.github.io/2021/07/20/cpp_leftvalue_and_rightvalue/</id>
    <published>2021-07-20T14:10:55.000Z</published>
    <updated>2021-07-23T02:19:17.954Z</updated>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="C/C++" scheme="https://wnxy.github.io/categories/C-C/"/>
    
    
      <category term="左值" scheme="https://wnxy.github.io/tags/%E5%B7%A6%E5%80%BC/"/>
    
      <category term="右值" scheme="https://wnxy.github.io/tags/%E5%8F%B3%E5%80%BC/"/>
    
  </entry>
  
  <entry>
    <title>C++ 文件操作与文件流</title>
    <link href="https://wnxy.github.io/2021/07/17/cpp_file_stream/"/>
    <id>https://wnxy.github.io/2021/07/17/cpp_file_stream/</id>
    <published>2021-07-17T14:09:54.000Z</published>
    <updated>2021-07-23T02:15:53.986Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、文件的概念&quot;&gt;&lt;a href=&quot;#一、文件的概念&quot; class=&quot;headerlink&quot; title=&quot;一、文件的概念&quot;&gt;&lt;/a&gt;一、文件的概念&lt;/h2&gt;&lt;p&gt;对于用户来说，常用到的文件有两大类：程序文件和数据文件。而根据文件中数据的组织方式，则可以将文件分为&lt;strong&gt;ASCII 文件&lt;/strong&gt;和&lt;strong&gt;二进制文件&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ASCII 文件，又称字符文件或者文本文件，它的每一个字节放一个 ASCII 代码，代表一个字符。&lt;/li&gt;
&lt;li&gt;二进制文件，又称内部格式文件或字节文件，是把内存中的数据按其在内存中的存储形式原样输出到磁盘上存放。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="C/C++" scheme="https://wnxy.github.io/categories/C-C/"/>
    
    
      <category term="文件流" scheme="https://wnxy.github.io/tags/%E6%96%87%E4%BB%B6%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>C++中的构造函数与析构函数</title>
    <link href="https://wnxy.github.io/2021/07/15/cpp_constructor_and_destructor/"/>
    <id>https://wnxy.github.io/2021/07/15/cpp_constructor_and_destructor/</id>
    <published>2021-07-15T13:36:42.000Z</published>
    <updated>2021-07-22T14:09:09.258Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;原文链接：&lt;a href=&quot;https://www.cnblogs.com/mr-wid/archive/2013/02/19/2917911.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.cnblogs.com/mr-wid/archive/2013/02/19/2917911.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;一、构造函数介绍&quot;&gt;&lt;a href=&quot;#一、构造函数介绍&quot; class=&quot;headerlink&quot; title=&quot;一、构造函数介绍&quot;&gt;&lt;/a&gt;一、构造函数介绍&lt;/h2&gt;&lt;h3 id=&quot;1-构造函数的作用&quot;&gt;&lt;a href=&quot;#1-构造函数的作用&quot; class=&quot;headerlink&quot; title=&quot;1.构造函数的作用&quot;&gt;&lt;/a&gt;1.构造函数的作用&lt;/h3&gt;&lt;p&gt;构造函数主要用来在创建对象时完成对对象属性的一些初始化等操作, 当创建对象时, 对象会自动调用它的构造函数。一般来说, 构造函数有以下三个方面的作用:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;给创建的对象建立一个标识符;&lt;/li&gt;
&lt;li&gt;为对象数据成员开辟内存空间;&lt;/li&gt;
&lt;li&gt;完成对象数据成员的初始化。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="C/C++" scheme="https://wnxy.github.io/categories/C-C/"/>
    
    
      <category term="构造函数" scheme="https://wnxy.github.io/tags/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/"/>
    
      <category term="析构函数" scheme="https://wnxy.github.io/tags/%E6%9E%90%E6%9E%84%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>STL中的优先级队列和堆问题</title>
    <link href="https://wnxy.github.io/2021/06/28/Priority_queue_and_heap/"/>
    <id>https://wnxy.github.io/2021/06/28/Priority_queue_and_heap/</id>
    <published>2021-06-28T02:20:50.000Z</published>
    <updated>2021-06-29T13:06:05.469Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;priority_queue 是容器适配器，它提供常数时间的（默认）最大元素查找，对数代价的插入与释出。&lt;/p&gt;
&lt;p&gt;可用用户提供的 &lt;code&gt;Compare&lt;/code&gt; 更改顺序，例如，用 std::greater&lt;T&gt; 将导致最小元素作为 &lt;a href=&quot;https://zh.cppreference.com/w/cpp/container/priority_queue/top&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;top()&lt;/a&gt; 出现。&lt;/p&gt;
&lt;p&gt;用 &lt;code&gt;priority_queue&lt;/code&gt; 工作类似管理某些随机访问容器中的&lt;a href=&quot;https://zh.cppreference.com/w/cpp/algorithm/make_heap&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;堆&lt;/a&gt;，优势是不可能突然把堆非法化。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;默认情况下priority_queue内部是以”降序“排列的，即默认&lt;strong&gt;大顶堆&lt;/strong&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="C/C++" scheme="https://wnxy.github.io/categories/C-C/"/>
    
    
      <category term="堆" scheme="https://wnxy.github.io/tags/%E5%A0%86/"/>
    
      <category term="STL" scheme="https://wnxy.github.io/tags/STL/"/>
    
      <category term="priority_queue" scheme="https://wnxy.github.io/tags/priority-queue/"/>
    
      <category term="优先级队列" scheme="https://wnxy.github.io/tags/%E4%BC%98%E5%85%88%E7%BA%A7%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>求解某一范围内的全部素数</title>
    <link href="https://wnxy.github.io/2021/06/27/Calculate_prime_numbers/"/>
    <id>https://wnxy.github.io/2021/06/27/Calculate_prime_numbers/</id>
    <published>2021-06-27T12:28:04.000Z</published>
    <updated>2021-06-29T12:20:54.631Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;素数&lt;/strong&gt;又称质数，是指大于1的&lt;a href=&quot;https://baike.baidu.com/item/自然数&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;自然数&lt;/a&gt;中，除了1和它本身，不能被其它自然数整除的数字。1被定义为非素数。大于1的自然数，如果不是素数则为&lt;strong&gt;合数&lt;/strong&gt;。&lt;strong&gt;2是最小的素数&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;问题&lt;/strong&gt;：给定一个范围，求解这个范围内的全部素数。&lt;/p&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://wnxy.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="LeetCode刷题" scheme="https://wnxy.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/LeetCode%E5%88%B7%E9%A2%98/"/>
    
    
      <category term="素数" scheme="https://wnxy.github.io/tags/%E7%B4%A0%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>经典 TopK 问题</title>
    <link href="https://wnxy.github.io/2021/06/25/Classic_TopK_problem/"/>
    <id>https://wnxy.github.io/2021/06/25/Classic_TopK_problem/</id>
    <published>2021-06-25T12:00:52.000Z</published>
    <updated>2021-06-29T08:10:49.295Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;什么是 Top K 问题？简单来说就是在一堆数据里面找到前 K 大（当然也可以是前 K 小）的数。&lt;/p&gt;
&lt;p&gt;这个问题也是十分经典的算法问题，不论是面试中还是实际开发中，都非常典型。而这个问题其实也有很多种做法，你真的都懂了么？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;经典的 Top K 问题有：最大（小） K 个数、前 K 个高频元素、第 K 个最大（小）元素，下面举例子说明：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;栗子(以下所有方法均使用这个栗子)&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;从 data[1, 12]={5,3,7,1,8,2,9,4,7,2,6,6} 这n=12个数中，找出最大的k=5个。&lt;/p&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://wnxy.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="LeetCode刷题" scheme="https://wnxy.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/LeetCode%E5%88%B7%E9%A2%98/"/>
    
    
      <category term="排序" scheme="https://wnxy.github.io/tags/%E6%8E%92%E5%BA%8F/"/>
    
      <category term="堆" scheme="https://wnxy.github.io/tags/%E5%A0%86/"/>
    
      <category term="分治法" scheme="https://wnxy.github.io/tags/%E5%88%86%E6%B2%BB%E6%B3%95/"/>
    
      <category term="减治法" scheme="https://wnxy.github.io/tags/%E5%87%8F%E6%B2%BB%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 单调栈的理解与使用</title>
    <link href="https://wnxy.github.io/2021/05/08/Understanding-and-use-of-monotone-stack/"/>
    <id>https://wnxy.github.io/2021/05/08/Understanding-and-use-of-monotone-stack/</id>
    <published>2021-05-08T06:26:41.000Z</published>
    <updated>2021-05-09T01:02:29.597Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;写在前面：LeetCode刷题笔记&lt;/p&gt;
&lt;p&gt;近来刷题，遇到单调栈，感觉这是个宝藏解题思想，在此记录一下！&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;单调栈定义&quot;&gt;&lt;a href=&quot;#单调栈定义&quot; class=&quot;headerlink&quot; title=&quot;单调栈定义&quot;&gt;&lt;/a&gt;单调栈定义&lt;/h2&gt;&lt;p&gt;单调栈是指：站内元素保持一定单调性（单调递增或单调递减）的栈。这里的单调递增或递减是指从栈顶到栈底单调递增或递减。&lt;/p&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://wnxy.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="LeetCode刷题" scheme="https://wnxy.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/LeetCode%E5%88%B7%E9%A2%98/"/>
    
    
      <category term="单调栈" scheme="https://wnxy.github.io/tags/%E5%8D%95%E8%B0%83%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>算术表达式的前序、中序、后序表示及其转换</title>
    <link href="https://wnxy.github.io/2021/05/06/Arithmetic-expression/"/>
    <id>https://wnxy.github.io/2021/05/06/Arithmetic-expression/</id>
    <published>2021-05-06T05:51:34.000Z</published>
    <updated>2021-05-08T11:18:40.809Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;写在前面：LeetCode刷题笔记&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;中序表达式转后序表达式（从左向右读入）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;创建一个队列，存储后缀表达式；创建一个栈，存储操作符。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;遇到操作数则送入队列。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;遇到 “(“ ，入栈，遇到操作符入栈。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果遇到其他运算符，不断去除所有运算优先级大于等于当前运算符的运算符，送入队列。最后，新的符号入栈。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;遇到 “)” 括号，则将栈内从 “(“ 到 “)” 的所有操作符全部取出送入队列（左括号出栈但不入队）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;中序表达式读取结束后，如果栈不为空，则将栈内元素依次出栈送入队列。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;此时队列的表达式即为原中序表达式的后序表达式。&lt;/p&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://wnxy.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="LeetCode刷题" scheme="https://wnxy.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/LeetCode%E5%88%B7%E9%A2%98/"/>
    
    
      <category term="算术表达式" scheme="https://wnxy.github.io/tags/%E7%AE%97%E6%9C%AF%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
      <category term="前序表达式" scheme="https://wnxy.github.io/tags/%E5%89%8D%E5%BA%8F%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
      <category term="中序表达式" scheme="https://wnxy.github.io/tags/%E4%B8%AD%E5%BA%8F%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
      <category term="后序表达式" scheme="https://wnxy.github.io/tags/%E5%90%8E%E5%BA%8F%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
      <category term="逆波兰式" scheme="https://wnxy.github.io/tags/%E9%80%86%E6%B3%A2%E5%85%B0%E5%BC%8F/"/>
    
      <category term="栈" scheme="https://wnxy.github.io/tags/%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>如何优雅的使用Git</title>
    <link href="https://wnxy.github.io/2021/04/27/Git-usage/"/>
    <id>https://wnxy.github.io/2021/04/27/Git-usage/</id>
    <published>2021-04-27T08:01:32.000Z</published>
    <updated>2021-10-27T02:01:41.303Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;git初始化本地仓库&quot;&gt;&lt;a href=&quot;#git初始化本地仓库&quot; class=&quot;headerlink&quot; title=&quot;git初始化本地仓库&quot;&gt;&lt;/a&gt;git初始化本地仓库&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git init&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;此操作会生成一个.git文件，默认情况下是隐藏的。&lt;/p&gt;
&lt;h2 id=&quot;git仓库clone到本地&quot;&gt;&lt;a href=&quot;#git仓库clone到本地&quot; class=&quot;headerlink&quot; title=&quot;git仓库clone到本地&quot;&gt;&lt;/a&gt;git仓库clone到本地&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git clone HTTPS&amp;#x2F;SSH&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="GitHub" scheme="https://wnxy.github.io/categories/GitHub/"/>
    
    
      <category term="github" scheme="https://wnxy.github.io/tags/github/"/>
    
      <category term="Git" scheme="https://wnxy.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>C语言typedef与#define详谈</title>
    <link href="https://wnxy.github.io/2021/03/17/C-typedef-and-define-specific-explain/"/>
    <id>https://wnxy.github.io/2021/03/17/C-typedef-and-define-specific-explain/</id>
    <published>2021-03-17T14:45:22.000Z</published>
    <updated>2021-03-18T07:00:21.076Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、typedef与-define比较&quot;&gt;&lt;a href=&quot;#一、typedef与-define比较&quot; class=&quot;headerlink&quot; title=&quot;一、typedef与#define比较&quot;&gt;&lt;/a&gt;一、&lt;strong&gt;typedef&lt;/strong&gt;与&lt;strong&gt;#define&lt;/strong&gt;比较&lt;/h2&gt;&lt;h3 id=&quot;typedef和-define功能的共同点&quot;&gt;&lt;a href=&quot;#typedef和-define功能的共同点&quot; class=&quot;headerlink&quot; title=&quot;typedef和#define功能的共同点&quot;&gt;&lt;/a&gt;&lt;code&gt;typedef&lt;/code&gt;和&lt;code&gt;#define&lt;/code&gt;功能的共同点&lt;/h3&gt;&lt;p&gt;例如：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; BYTE unsigned char&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;表示预处理器用&lt;code&gt;BYTE&lt;/code&gt;替换&lt;code&gt;unsigned char&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; BYTE&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;表示编译器给类型&lt;code&gt;unsigned char&lt;/code&gt;起了一个别名&lt;code&gt;BYTE&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="C/C++" scheme="https://wnxy.github.io/categories/C-C/"/>
    
    
      <category term="typedef" scheme="https://wnxy.github.io/tags/typedef/"/>
    
      <category term="define" scheme="https://wnxy.github.io/tags/define/"/>
    
      <category term="宏" scheme="https://wnxy.github.io/tags/%E5%AE%8F/"/>
    
  </entry>
  
  <entry>
    <title>matplotlib函数汇总</title>
    <link href="https://wnxy.github.io/2020/11/28/Matplotlib-function/"/>
    <id>https://wnxy.github.io/2020/11/28/Matplotlib-function/</id>
    <published>2020-11-28T13:22:08.000Z</published>
    <updated>2020-11-28T14:51:29.327Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;matplotlib函数汇总&quot;&gt;&lt;a href=&quot;#matplotlib函数汇总&quot; class=&quot;headerlink&quot; title=&quot;matplotlib函数汇总&quot;&gt;&lt;/a&gt;matplotlib函数汇总&lt;/h2&gt;
    
    </summary>
    
    
      <category term="转载" scheme="https://wnxy.github.io/categories/%E8%BD%AC%E8%BD%BD/"/>
    
    
      <category term="Python" scheme="https://wnxy.github.io/tags/Python/"/>
    
      <category term="matplotlib" scheme="https://wnxy.github.io/tags/matplotlib/"/>
    
  </entry>
  
  <entry>
    <title>朴素贝叶斯算法原理及实现</title>
    <link href="https://wnxy.github.io/2020/11/10/Naive-bayes/"/>
    <id>https://wnxy.github.io/2020/11/10/Naive-bayes/</id>
    <published>2020-11-10T01:39:30.000Z</published>
    <updated>2020-11-29T01:53:33.237Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、贝叶斯算法原理&quot;&gt;&lt;a href=&quot;#一、贝叶斯算法原理&quot; class=&quot;headerlink&quot; title=&quot;一、贝叶斯算法原理&quot;&gt;&lt;/a&gt;一、贝叶斯算法原理&lt;/h2&gt;&lt;h3 id=&quot;1-条件概率公式&quot;&gt;&lt;a href=&quot;#1-条件概率公式&quot; class=&quot;headerlink&quot; title=&quot;1.条件概率公式&quot;&gt;&lt;/a&gt;1.条件概率公式&lt;/h3&gt;&lt;p&gt;根据文氏图，可以看到在事件B发生的情况下，事件A发生的概率为：&lt;/p&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://wnxy.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Machine Learning" scheme="https://wnxy.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Machine-Learning/"/>
    
    
      <category term="Python" scheme="https://wnxy.github.io/tags/Python/"/>
    
      <category term="Machine-Learning" scheme="https://wnxy.github.io/tags/Machine-Learning/"/>
    
      <category term="机器学习" scheme="https://wnxy.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="朴素贝叶斯" scheme="https://wnxy.github.io/tags/%E6%9C%B4%E7%B4%A0%E8%B4%9D%E5%8F%B6%E6%96%AF/"/>
    
  </entry>
  
  <entry>
    <title>数据可视化模块Matplotlib实操</title>
    <link href="https://wnxy.github.io/2020/11/02/Data-visualization-matplotlib/"/>
    <id>https://wnxy.github.io/2020/11/02/Data-visualization-matplotlib/</id>
    <published>2020-11-02T13:48:55.000Z</published>
    <updated>2020-11-10T05:37:53.556Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;通过 Matplotlib，开发者可以仅需要几行代码，便可以生成绘图，直方图，功率谱，条形图，错误图，散点图等。&lt;/p&gt;
&lt;h1 id=&quot;导读&quot;&gt;&lt;a href=&quot;#导读&quot; class=&quot;headerlink&quot; title=&quot;导读&quot;&gt;&lt;/a&gt;&lt;strong&gt;导读&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;Matplotlib 是一个 Python 的 2D绘图库，它以各种硬拷贝格式和跨平台的交互式环境生成出版质量级别的图形。通过 Matplotlib，开发者可以仅需要几行代码，便可以生成绘图，直方图，功率谱，条形图，错误图，散点图等。&lt;/p&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://wnxy.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Python" scheme="https://wnxy.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Python/"/>
    
    
      <category term="Python" scheme="https://wnxy.github.io/tags/Python/"/>
    
      <category term="Matplotlib" scheme="https://wnxy.github.io/tags/Matplotlib/"/>
    
      <category term="数据可视化" scheme="https://wnxy.github.io/tags/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>机器学习之神经网络实现MNIST手写字识别</title>
    <link href="https://wnxy.github.io/2020/10/25/Neural-networks-realizes-MNIST-handwriting-recognition/"/>
    <id>https://wnxy.github.io/2020/10/25/Neural-networks-realizes-MNIST-handwriting-recognition/</id>
    <published>2020-10-25T15:05:00.000Z</published>
    <updated>2020-11-24T13:42:48.128Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、神经网络原理&quot;&gt;&lt;a href=&quot;#一、神经网络原理&quot; class=&quot;headerlink&quot; title=&quot;一、神经网络原理&quot;&gt;&lt;/a&gt;一、神经网络原理&lt;/h2&gt;&lt;p&gt;线性回归（Linear Regression）和逻辑回归（Logistic Regression）通常用来处理线性模型，如果利用线性回归或逻辑回归对多特征的非线性问题进行分类，则涉及太多特征组合的计算，往往导致计算负荷增大，并不适合解决这类问题。&lt;/p&gt;
&lt;p&gt;假设我们需要训练一个模型用来判断一张图片中是否出现汽车，可能有很多用来训练模型的数据，这些图片有的包含小汽车，有的没有，利用这些图片的一个个像素值作为特征，训练一个满足这样功能的模型。训练过程需要处理可能百万级别甚至更多的数据，对于这样问题通常采用神经网络（Neural Networks）解决。&lt;/p&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://wnxy.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Machine Learning" scheme="https://wnxy.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Machine-Learning/"/>
    
    
      <category term="Python" scheme="https://wnxy.github.io/tags/Python/"/>
    
      <category term="Machine-Learning" scheme="https://wnxy.github.io/tags/Machine-Learning/"/>
    
      <category term="机器学习" scheme="https://wnxy.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="神经网络" scheme="https://wnxy.github.io/tags/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    
      <category term="MNIST" scheme="https://wnxy.github.io/tags/MNIST/"/>
    
  </entry>
  
  <entry>
    <title>MNIST手写字符集的数据解析</title>
    <link href="https://wnxy.github.io/2020/10/18/Data-analysis-of-MNIST-handwritten-character-set/"/>
    <id>https://wnxy.github.io/2020/10/18/Data-analysis-of-MNIST-handwritten-character-set/</id>
    <published>2020-10-18T06:56:24.000Z</published>
    <updated>2020-10-19T01:44:05.954Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-前言&quot;&gt;&lt;a href=&quot;#1-前言&quot; class=&quot;headerlink&quot; title=&quot;1.前言&quot;&gt;&lt;/a&gt;1.前言&lt;/h3&gt;&lt;p&gt;最近在做MNIST手写字识别，官方MNIST数据集为 .idx3-ubyte 格式，程序无法直接读取，涉及MNIST数据集的解析。&lt;/p&gt;
&lt;p&gt;MNIST数据集：&lt;a href=&quot;http://yann.lecun.com/exdb/mnist/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://yann.lecun.com/exdb/mnist/&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://wnxy.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Machine Learning" scheme="https://wnxy.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Machine-Learning/"/>
    
    
      <category term="Python" scheme="https://wnxy.github.io/tags/Python/"/>
    
      <category term="Machine-Learning" scheme="https://wnxy.github.io/tags/Machine-Learning/"/>
    
      <category term="机器学习" scheme="https://wnxy.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据解析" scheme="https://wnxy.github.io/tags/%E6%95%B0%E6%8D%AE%E8%A7%A3%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Python中Struct模块的日常用法</title>
    <link href="https://wnxy.github.io/2020/10/17/Daily-usage-of-Struct-module-in-Python/"/>
    <id>https://wnxy.github.io/2020/10/17/Daily-usage-of-Struct-module-in-Python/</id>
    <published>2020-10-17T03:15:19.000Z</published>
    <updated>2020-10-19T01:39:56.872Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;最近在训练mnist字符集时用到二进制数据的处理，面向Google编程后稍稍搞懂了一点，故做一点笔记，以作备忘。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Python 中用来处理二进制数据时采用 Struct 模块。&lt;/p&gt;
&lt;p&gt;Struct模块中最常用的函数为:&lt;/p&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://wnxy.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Python" scheme="https://wnxy.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Python/"/>
    
    
      <category term="Python" scheme="https://wnxy.github.io/tags/Python/"/>
    
      <category term="Struct模块" scheme="https://wnxy.github.io/tags/Struct%E6%A8%A1%E5%9D%97/"/>
    
      <category term="二进制处理" scheme="https://wnxy.github.io/tags/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%A4%84%E7%90%86/"/>
    
      <category term="Binary" scheme="https://wnxy.github.io/tags/Binary/"/>
    
  </entry>
  
  <entry>
    <title>机器学习——逻辑回归算法（Logistic Regression）思想及算法实现</title>
    <link href="https://wnxy.github.io/2020/10/11/Machine-learning-logistic-regression-algorithm/"/>
    <id>https://wnxy.github.io/2020/10/11/Machine-learning-logistic-regression-algorithm/</id>
    <published>2020-10-11T10:57:20.000Z</published>
    <updated>2020-10-17T11:39:55.753Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-分类原理&quot;&gt;&lt;a href=&quot;#1-分类原理&quot; class=&quot;headerlink&quot; title=&quot;1.分类原理&quot;&gt;&lt;/a&gt;1.分类原理&lt;/h1&gt;&lt;h2 id=&quot;1-1-逻辑回归&quot;&gt;&lt;a href=&quot;#1-1-逻辑回归&quot; class=&quot;headerlink&quot; title=&quot;1.1 逻辑回归&quot;&gt;&lt;/a&gt;1.1 逻辑回归&lt;/h2&gt;&lt;p&gt;逻辑回归算法是一个分类算法，其性质是它的输出值永远在0到1之间，是目前最流行、最广泛使用的一直学习算法。&lt;/p&gt;
&lt;h2 id=&quot;1-2-Sigmoid函数&quot;&gt;&lt;a href=&quot;#1-2-Sigmoid函数&quot; class=&quot;headerlink&quot; title=&quot;1.2 Sigmoid函数&quot;&gt;&lt;/a&gt;1.2 Sigmoid函数&lt;/h2&gt;&lt;p&gt;根据线性回归模型我们只能预测连续的值，然而对于分类问题，我们需要输出0或1，此时引入逻辑回归模型，模型核心为Sigmoid函数，公式为：$g(z)=\frac{1}{1+e^{-z}}$&lt;/p&gt;
&lt;p&gt;其中：$z=-\Theta^{T} X$&lt;/p&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://wnxy.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Machine Learning" scheme="https://wnxy.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Machine-Learning/"/>
    
    
      <category term="Python" scheme="https://wnxy.github.io/tags/Python/"/>
    
      <category term="Machine-Learning" scheme="https://wnxy.github.io/tags/Machine-Learning/"/>
    
      <category term="机器学习" scheme="https://wnxy.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>python数据可视化——函数图像绘制</title>
    <link href="https://wnxy.github.io/2020/10/09/Python-data-visualization/"/>
    <id>https://wnxy.github.io/2020/10/09/Python-data-visualization/</id>
    <published>2020-10-09T02:08:31.000Z</published>
    <updated>2020-10-09T04:19:21.003Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;利用python的matplotlib库进行数据可视化，绘制定义函数的图像。&lt;/p&gt;
&lt;p&gt;以机器学习逻辑回归的sigmoid函数为例：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.codecogs.com/eqnedit.php?latex=g\left&amp;space;(&amp;space;z&amp;space;\right&amp;space;)=\frac{1}{1&amp;plus;e^{-z}}&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://latex.codecogs.com/gif.latex?g\left&amp;space;(&amp;space;z&amp;space;\right&amp;space;)=\frac{1}{1&amp;plus;e^{-z}}&quot; title=&quot;g\left ( z \right )=\frac{1}{1+e^{-z}}&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;python代码实现：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#定义sigmoid函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sigmoid&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(z)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;/(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;+np.exp(-z))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://wnxy.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Python" scheme="https://wnxy.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Python/"/>
    
    
      <category term="Python" scheme="https://wnxy.github.io/tags/Python/"/>
    
      <category term="Machine-Learning" scheme="https://wnxy.github.io/tags/Machine-Learning/"/>
    
      <category term="机器学习" scheme="https://wnxy.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="Matplotlib" scheme="https://wnxy.github.io/tags/Matplotlib/"/>
    
      <category term="函数图像" scheme="https://wnxy.github.io/tags/%E5%87%BD%E6%95%B0%E5%9B%BE%E5%83%8F/"/>
    
  </entry>
  
</feed>
